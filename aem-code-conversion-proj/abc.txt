C:/Users/sumeet.patil/Desktop/JavaClasses
Processing file: MyAccountServlet.java
[DEBUG] 2025-01-15T10:59:08.710Z: Extracting metadata for file: MyAccountServlet.java
--- Tokens ---
--- Parse Tree ---
inside enterClassOrInterfaceModifier@SlingServlet(paths={"/bin/common/MyAccountServlet"},metatype=true,extensions={"json"},label="My Account Service Servlet")
inside enterClassOrInterfaceModifier@Properties({@Property(name="service.pid",value="com.mygenesis.components.core.servlets",propertyPrivate=false),@Property(name="service.description",value="Connects to Covisint REST API",propertyPrivate=false),@Property(name="service.vendor",value="Wipro Technologies",propertyPrivate=false),@Property(name="label",value="connectRestAPI")})
inside enterClassOrInterfaceModifier@Reference
inside enterClassOrInterfaceModifierpublic
inside enterClassOrInterfaceModifierfinal
[DEBUG] 2025-01-15T10:59:08.849Z: Class found: MyAccountServlet
Superclass for class ------------- SlingAllMethodsServlet
inside enterClassOrInterfaceModifierprivate
inside enterClassOrInterfaceModifierstatic
inside enterClassOrInterfaceModifierfinal
Field Metadata -----------------------serialVersionUID  
inside enterClassOrInterfaceModifierprivate
inside enterClassOrInterfaceModifierstatic
inside enterClassOrInterfaceModifierfinal
Field Metadata -----------------------log  
inside enterClassOrInterfaceModifier@Reference
Field Metadata -----------------------myaccountservices  
inside enterClassOrInterfaceModifier@Reference
Field Metadata -----------------------pdfservice  
inside enterClassOrInterfaceModifier@Reference
inside enterClassOrInterfaceModifierprivate
Field Metadata -----------------------reqService  
inside enterClassOrInterfaceModifier@Reference
inside enterClassOrInterfaceModifierprotected
Field Metadata -----------------------resourceResolverFactory  
inside enterClassOrInterfaceModifier@Reference
inside enterClassOrInterfaceModifierpublic
Field Metadata -----------------------covisintConfigService  
inside enterClassOrInterfaceModifier@Reference
inside enterClassOrInterfaceModifierpublic
Field Metadata -----------------------recaptchaValidationService  
inside enterClassOrInterfaceModifier@Reference
inside enterClassOrInterfaceModifierprivate
Field Metadata -----------------------globalConfig  
inside enterClassOrInterfaceModifier@Override
inside enterClassOrInterfaceModifierprotected
[DEBUG] 2025-01-15T10:59:08.859Z: Method found: enterMethodDeclaration doPost
modifiers for method  ------------- 0
inside enterClassOrInterfaceModifierpublic
[DEBUG] 2025-01-15T10:59:08.861Z: Method found: enterMethodDeclaration isvalidPassword
modifiers for method  ------------- 0
------------------ @SlingServlet(paths={"/bin/common/MyAccountServlet"},metatype=true,extensions={"json"},label="My Account Service Servlet")
------------------ @Properties({@Property(name="service.pid",value="com.mygenesis.components.core.servlets",propertyPrivate=false),@Property(name="service.description",value="Connects to Covisint REST API",propertyPrivate=false),@Property(name="service.vendor",value="Wipro Technologies",propertyPrivate=false),@Property(name="label",value="connectRestAPI")})
------------------ @Reference
------------------ public
------------------ final
Class metadata: {
  className: 'MyAccountServlet',
  modifiers: [
    '@SlingServlet(paths={"/bin/common/MyAccountServlet"},metatype=true,extensions={"json"},label="My Account Service Servlet")',
    '@Properties({@Property(name="service.pid",value="com.mygenesis.components.core.servlets",propertyPrivate=false),@Property(name="service.description",value="Connects to Covisint REST API",propertyPrivate=false),@Property(name="service.vendor",value="Wipro Technologies",propertyPrivate=false),@Property(name="label",value="connectRestAPI")})',
    '@Reference',
    'public',
    'final'
  ],
  superclass: 'SlingAllMethodsServlet',
  interfaces: []
}
--- Visitor ---
Class: MyAccountServlet
Modifiers: @SlingServlet(paths={"/bin/common/MyAccountServlet"},metatype=true,extensions={"json"},label="My Account Service Servlet"), @Properties({@Property(name="service.pid",value="com.mygenesis.components.core.servlets",propertyPrivate=false),@Property(name="service.description",value="Connects to Covisint REST API",propertyPrivate=false),@Property(name="service.vendor",value="Wipro Technologies",propertyPrivate=false),@Property(name="label",value="connectRestAPI")}), @Reference, public, final
Superclass: SlingAllMethodsServlet
Interfaces: 
lines ****************************999
overlapStart in chunkMethodByTokens  36
overlapStart in chunkMethodByTokens  76
overlapStart in chunkMethodByTokens  116
overlapStart in chunkMethodByTokens  156
overlapStart in chunkMethodByTokens  196
overlapStart in chunkMethodByTokens  236
overlapStart in chunkMethodByTokens  276
overlapStart in chunkMethodByTokens  316
overlapStart in chunkMethodByTokens  356
overlapStart in chunkMethodByTokens  396
overlapStart in chunkMethodByTokens  436
overlapStart in chunkMethodByTokens  476
overlapStart in chunkMethodByTokens  516
overlapStart in chunkMethodByTokens  556
overlapStart in chunkMethodByTokens  596
overlapStart in chunkMethodByTokens  636
overlapStart in chunkMethodByTokens  676
overlapStart in chunkMethodByTokens  716
overlapStart in chunkMethodByTokens  756
overlapStart in chunkMethodByTokens  796
overlapStart in chunkMethodByTokens  836
overlapStart in chunkMethodByTokens  876
overlapStart in chunkMethodByTokens  916
overlapStart in chunkMethodByTokens  956
chunk in chunkMethodByTokens &&&&&&&&&& package com.mygenesis.components.core.servlets;

import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.Cookie;

import org.apache.commons.lang3.StringUtils;
import org.apache.felix.scr.annotations.Properties;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.sling.SlingServlet;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.commons.json.JSONArray;
import org.apache.sling.commons.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.mygenesis.components.core.services.CovisintConfigService;
import com.mygenesis.components.core.services.DecodedPdfServices;
import com.mygenesis.components.core.services.GlobalConfigService;
import com.mygenesis.components.core.services.MyAccountServices;
import com.mygenesis.components.core.services.RecaptchaValidationService;
import com.mygenesis.components.core.services.RequestSecurityService;
import com.mygenesis.components.core.services.ServiceConstants;
import com.mygenesis.components.core.utils.CommonUtils;
import com.mygenesis.components.core.utils.ConnectionUtils;
import com.mygenesis.components.core.utils.CookieUtil;
import com.mygenesis.components.core.utils.Encryption;
import com.mygenesis.components.core.utils.LinkUtils;

@SlingServlet(paths = { "/bin/common/MyAccountServlet" }, metatype = true, extensions = {
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& import com.mygenesis.components.core.utils.Encryption;
import com.mygenesis.components.core.utils.LinkUtils;

@SlingServlet(paths = { "/bin/common/MyAccountServlet" }, metatype = true, extensions = {
                "json" }, label = "My Account Service Servlet")
                "json" }, label = "My Account Service Servlet")
@Properties({
                @Property(name = "service.pid", value = "com.mygenesis.components.core.servlets", propertyPrivate = false),
                @Property(name = "service.description", value = "Connects to Covisint REST API", propertyPrivate = false),
                @Property(name = "service.vendor", value = "Wipro Technologies", propertyPrivate = false),
                @Property(name = "label", value = "connectRestAPI") })

@Reference
public final class MyAccountServlet extends SlingAllMethodsServlet {
        private static final long serialVersionUID = 1L;

        private static final Logger log = LoggerFactory.getLogger(MyAccountServlet.class);

        @Reference
        MyAccountServices myaccountservices;

        @Reference
        DecodedPdfServices pdfservice;

        @Reference
        private RequestSecurityService reqService;

        @Reference
        protected ResourceResolverFactory resourceResolverFactory;
        
        @Reference
    	public CovisintConfigService covisintConfigService;
        
        @Reference
    	public RecaptchaValidationService recaptchaValidationService;
        
        @Reference
    	private GlobalConfigService globalConfig;

        @Override
        protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) {
                try {
                        // Fetch the request parameters from the request

                        String vin = request.getParameter("vin");
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& try {
                        // Fetch the request parameters from the request

                        String vin = request.getParameter("vin");
                        String username = request.getParameter("username");
                        String username = request.getParameter("username");
                        String token = request.getParameter("token");
                        String service = request.getParameter("service");
                        String domainSelector = StringUtils.EMPTY;
                        String completeURL = request.getParameter(ServiceConstants.URL);

                        // log.debug("VINNNN:" + vin);

                        // log.debug("MyAccountServlet Service Called::" + service);
                        // log.debug("Current page url:" + completeURL);

                        /*--------- Domain value extracted from URL--------- */
                        if (null != completeURL) {
                                domainSelector = ConnectionUtils.domainExtractor(completeURL);
                        }

                        // log.debug("Domain Value ::" + domainSelector);

                        if (service.equals("myaccountservices")) {
                                String password = StringUtils.EMPTY;
                                log.debug("Inside myaccountservices::" + domainSelector);
                                String firstname = request.getParameter("firstname");
                                String lastname = request.getParameter("lastname");
                                String emailaddress = request.getParameter("emailaddress");
                                String securityquestion = request.getParameter("security_question");
                                String securityanswer = request.getParameter("security_answer");
                                String pass_word = request.getParameter("pass_word");
                                boolean validPassword = isvalidPassword(pass_word);
                                if (validPassword) {
                                        password = pass_word;
                                } else {
                                        password = "";
                                }
                                String city = request.getParameter("newusercity");
                                String region = request.getParameter("newuserstate");
                                String zipcode = request.getParameter("zipcode");
                                String flag = request.getParameter("rewardsFlag");
                                String gRecaptchaResponse = request.getParameter("captcharesponse");
                                
								boolean isvalidCaptcha = true;
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& String flag = request.getParameter("rewardsFlag");
                                String gRecaptchaResponse = request.getParameter("captcharesponse");
                                
								boolean isvalidCaptcha = true;


								if (covisintConfigService.getReCaptchaEnabled().equalsIgnoreCase("true")) {
									isvalidCaptcha = recaptchaValidationService.validate(request,
											gRecaptchaResponse, completeURL);

								}
                                if (!StringUtils.isEmpty(password)) {
                                	if(isvalidCaptcha) {
                                        JSONObject services = myaccountservices.registrationAEM(firstname, lastname,
                                                        emailaddress, password,
                                                        zipcode, city, region, securityquestion, securityanswer, flag,
                                                        domainSelector);

                                        response.getWriter().write(services.toString());
                                	}else {
                                		response.setContentType("application/json");
                    					response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                    							ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                    					response.getWriter().write("Please verify that you are a robot.");
                                	}
								} else {

									response.getWriter()
											.write("Your password doesn't match the criteria. Please try again later.");
								}

							}

                        // code for change_password

						if (service.equals("changePassword")) {
							String password = StringUtils.EMPTY;
							String oldPassword = request.getParameter("oldPassword");
							String newPassword = request.getParameter("newPassword");
							boolean validPassword = isvalidPassword(newPassword);
							if (validPassword) {
								password = newPassword;
							} else {
								password = "";
							}
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& password = newPassword;
							} else {
								password = "";
							}


							if (!StringUtils.isEmpty(password)) {
								JSONObject changePassword = myaccountservices.changePassword(username, oldPassword,
										newPassword, domainSelector);

								response.setContentType("application/json");
								response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
										ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
								response.getWriter().write(changePassword.toString());

							} else {
								response.getWriter()
										.write("Your password doesn't match the criteria. Please try again later.");
							}

						}

                        // code for pinUpdate

                        if (service.equals("pinUpdate")) {
                                String pin = request.getParameter("pin");
                                String oldPin = request.getParameter("oldPin");
                                String questionCode = request.getParameter("questionCode");
                                String answer = request.getParameter("answer");

                                JSONObject pinUpdate = myaccountservices.pinUpdate(username, token, pin, oldPin,
                                                questionCode, answer,
                                                domainSelector);

                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(pinUpdate.toString());
                        }

                        if (service.equals("logOutService")) {

                        		JSONObject isLogout = myaccountservices.isLogout(username, token, domainSelector);

                                Cookie tokenCookie = CookieUtil.clearCookie(request, "jwt_token");
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& JSONObject isLogout = myaccountservices.isLogout(username, token, domainSelector);

                                Cookie tokenCookie = CookieUtil.clearCookie(request, "jwt_token");
                                Cookie snameCookie = CookieUtil.clearCookie(request, "s_name");
                                Cookie snameCookie = CookieUtil.clearCookie(request, "s_name");
                                Cookie isValidVehCookie = CookieUtil.clearCookie(request, "isValidatedVehicle");

                                response.setContentType("text/html");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                if (tokenCookie != null) {
                                        response.addCookie(tokenCookie);
                                }
                                if (snameCookie != null) {
                                        response.addCookie(snameCookie);
                                }
                                if (isValidVehCookie != null) {
                                        response.addCookie(isValidVehCookie);
                                }

                                String homepage = LinkUtils.getMappedLink(reqService.getLighthomepageHyundaiUri());

                                // response.sendRedirect(homepage);
                                response.getWriter().write("User have been logged out.");
                        }

                        if (service.equals("signoutFromSQA")) {

                                Cookie tokenCookie = CookieUtil.clearCookie(request, "jwt_token");
                                Cookie snameCookie = CookieUtil.clearCookie(request, "s_name");
                                Cookie isValidVehCookie = CookieUtil.clearCookie(request, "isValidatedVehicle");
                                // Cookie visitoridCookie = CookieUtil.clearCookie(request, "visitorid");
                                // Cookie MyHLoginCookie = CookieUtil.clearCookie(request, "MyHyundaiLogin");

                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                if (tokenCookie != null) {
                                        response.addCookie(tokenCookie);
                                }
                                if (snameCookie != null) {
                                        response.addCookie(snameCookie);
                                }
                                if (isValidVehCookie != null) {
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& if (snameCookie != null) {
                                        response.addCookie(snameCookie);
                                }
                                if (isValidVehCookie != null) {
                                        response.addCookie(isValidVehCookie);
                                        response.addCookie(isValidVehCookie);
                                }
                                // response.addCookie(visitoridCookie);
                                // response.addCookie(MyHLoginCookie);
                                response.getWriter().write("Cookie clean up.");

                        }
                        // code for add emergency contact
                        if (service.equals("setEmergencyContact")) {
                                String firstName = request.getParameter("firstName");
                                String lastName = request.getParameter("lastName");
                                String relationship = request.getParameter("relationship");
                                String contactEmail = request.getParameter("contactEmail");
                                String phone1 = request.getParameter("phone1");
                                String phone1Type = request.getParameter("phone1Type");
                                String phone2 = request.getParameter("phone2");
                                String phone2Type = request.getParameter("phone2Type");

                                JSONObject services = myaccountservices.addEmergencyContact(username, token, lastName,
                                                firstName,
                                                relationship, contactEmail, phone1, phone1Type, phone2, phone2Type,
                                                domainSelector);

                                response.getWriter().write(services.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                        }

                        // code for delete emergency contact

                        if (service.equals("getEmergencyContact")) {
                                String contactId = request.getParameter("contactId");
                                String loginId = contactId;
                                String actionType = request.getParameter("actionType");
                                String lastName = request.getParameter("lastName");
                                String firstName = request.getParameter("firstName");
                                String relationship = request.getParameter("relationship");
                                String email = request.getParameter("email");
                                String phone1 = request.getParameter("phone1");
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& String firstName = request.getParameter("firstName");
                                String relationship = request.getParameter("relationship");
                                String email = request.getParameter("email");
                                String phone1 = request.getParameter("phone1");
                                String phone1Type = request.getParameter("phone1Type");
                                String phone1Type = request.getParameter("phone1Type");
                                String phone2 = request.getParameter("phone2");
                                String phone2Type = request.getParameter("phone2Type");

                                /*
                                 * String services = myaccountservices.addEmergencyContact(username, token,
                                 * loginId, contactId, actionType,
                                 * lastName, firstName, relationship, email, phone1, phone1Type, phone2,
                                 * phone2Type);
                                 */
                                /*
                                 * log.info(services);
                                 * response.getWriter().write("myaccountservices="+services);
                                 */
                        }
                        if (service.equals("getOwnerInfoDashboard")) {
                                JSONObject services = myaccountservices.getOwnerInfoDashboard(username, token, vin,
                                                domainSelector);
                                log.info("owner info dashboard Data - " + services.toString());

                                JSONArray jsondata = services.getJSONArray("RESPONSE_STRING");
                                JSONObject firstVehicle = (JSONObject) jsondata.get(0);

                                if (firstVehicle.has("veh")) {
                                        JSONObject vInfo = firstVehicle.getJSONObject("veh");
                                        ResourceResolver resourceResolver = request.getResourceResolver();

                                        String path = vInfo.getString("Images360URL");
                                        String bodytype = null;

                                        if (vInfo.has("Body")) {
                                                bodytype = vInfo.getString("Body");
                                        }

                                        String csPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "ConnectedServices-01.png",
                                                        bodytype);
                                        services.put("ConnectedServicesDefaultURL", csPath);
                                        String dsPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "Dashboard-01.png", bodytype);
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& bodytype);
                                        services.put("ConnectedServicesDefaultURL", csPath);
                                        String dsPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "Dashboard-01.png", bodytype);
                                        services.put("DashboardDefaultURL", dsPath);
                                        services.put("DashboardDefaultURL", dsPath);
                                        String msPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "ManageSubscription-01.png",
                                                        bodytype);
                                        services.put("ManageSubscriptionDefaultURL", msPath);
                                        String mvhrPath = LinkUtils.getAssetPath(path, resourceResolver, "Mvhr-01.png",
                                                        bodytype);
                                        services.put("MvhrDefaultURL", mvhrPath);
                                        String myVehiclesPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "MyVehicles-01.png",
                                                        bodytype);
                                        services.put("MyVehiclesDefaultURL", myVehiclesPath);
                                        String offCanvasPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "OffCanvas-01.png", bodytype);
                                        services.put("OffCanvasDefaultURL", offCanvasPath);
                                        String serviceValetPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "ServiceValet-01.png",
                                                        bodytype);
                                        services.put("ServiceValetDefaultURL", serviceValetPath);
                                        String vehicleHealthPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "VehicleHealth-01.png",
                                                        bodytype);
                                        services.put("VehicleHealthDefaultURL", vehicleHealthPath);
                                        String vehicleHealthGcsPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                        "VehicleHealth-02.png",
                                                        bodytype);
                                        services.put("VehicleHealthGcsDefaultURL", vehicleHealthGcsPath);

                                        /*
                                         * firstVehicle.put("veh",vInfo);
                                         * services.put("RESPONSE_STRING", firstVehicle);
                                         */

                                }
                                response.getWriter().write(services.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                        }
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                        }

                        // code for get owner info
                        // code for get owner info
                        if (service.equals("getOwnerInfoService")) {
                                JSONObject services = myaccountservices.getOwnerInfo(username, token, domainSelector);

                                // log.debug("Data - "+services);
                                if (services.has("RESPONSE_STRING")) {
                                        JSONObject response_string = services.getJSONObject("RESPONSE_STRING");

                                        if (response_string.has("OwnersVehiclesInfo")) {
                                                JSONArray vehiclesInfo = response_string
                                                                .getJSONArray("OwnersVehiclesInfo");

                                                ResourceResolver resourceResolver = request.getResourceResolver();

                                                // vehiclesInfo.
                                                for (int i = 0; i < vehiclesInfo.length(); i++) {
                                                        JSONObject vInfo = (JSONObject) vehiclesInfo.get(i);
                                                        String path = vInfo.getString("Images360URL");
                                                        String bodytype = null;

                                                        if (vInfo.has("Body")) {
                                                                bodytype = vInfo.getString("Body");
                                                        }

                                                        String csPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "ConnectedServices-01.png",
                                                                        bodytype);
                                                        vInfo.put("ConnectedServicesDefaultURL", csPath);
                                                        String dsPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "Dashboard-01.png",
                                                                        bodytype);
                                                        vInfo.put("DashboardDefaultURL", dsPath);
                                                        String msPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "ManageSubscription-01.png",
                                                                        bodytype);
                                                        vInfo.put("ManageSubscriptionDefaultURL", msPath);
                                                        String mvhrPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "Mvhr-01.png", bodytype);
                                                        vInfo.put("MvhrDefaultURL", mvhrPath);
                                                        String myVehiclesPath = LinkUtils.getAssetPath(path,
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& String mvhrPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "Mvhr-01.png", bodytype);
                                                        vInfo.put("MvhrDefaultURL", mvhrPath);
                                                        String myVehiclesPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver, "MyVehicles-01.png",
                                                                        resourceResolver, "MyVehicles-01.png",
                                                                        bodytype);
                                                        vInfo.put("MyVehiclesDefaultURL", myVehiclesPath);
                                                        String offCanvasPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver, "OffCanvas-01.png",
                                                                        bodytype);
                                                        vInfo.put("OffCanvasDefaultURL", offCanvasPath);
                                                        String serviceValetPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver,
                                                                        "ServiceValet-01.png", bodytype);
                                                        vInfo.put("ServiceValetDefaultURL", serviceValetPath);
                                                        String vehicleHealthPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver,
                                                                        "VehicleHealth-01.png", bodytype);
                                                        vInfo.put("VehicleHealthDefaultURL", vehicleHealthPath);
                                                        String vehicleHealthGcsPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver,
                                                                        "VehicleHealth-02.png", bodytype);
                                                        vInfo.put("VehicleHealthGcsDefaultURL", vehicleHealthGcsPath);
                                                        vehiclesInfo.put(i, vInfo);
                                                }

                                                response_string.put("OwnersVehiclesInfo", vehiclesInfo);

                                                services.put("RESPONSE_STRING", response_string);

                                        }

                                }
                                response.getWriter().write(services.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);

                        }

                        // code for get owner multiple vehicles info
                        if (service.equals("getOwnersVehiclesInfoService")) {
                                JSONObject services = myaccountservices.getOwnersVehiclesInfo(username, token,
                                                domainSelector);
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& // code for get owner multiple vehicles info
                        if (service.equals("getOwnersVehiclesInfoService")) {
                                JSONObject services = myaccountservices.getOwnersVehiclesInfo(username, token,
                                                domainSelector);
                                // log.debug("Data - "+services);
                                // log.debug("Data - "+services);

                                if (services.has("OwnerInfo")) {
                                        JSONObject ownerinfo = services.getJSONObject("OwnerInfo");
                                        if (ownerinfo.has("OwnersVehiclesInfo")) {
                                                JSONArray vehiclesInfo = ownerinfo.getJSONArray("OwnersVehiclesInfo");
                                                ResourceResolver resourceResolver = request.getResourceResolver();

                                                // vehiclesInfo.
                                                for (int i = 0; i < vehiclesInfo.length(); i++) {
                                                        JSONObject vInfo = (JSONObject) vehiclesInfo.get(i);
                                                        String path = vInfo.getString("Images360URL");
                                                        String bodytype = null;

                                                        if (vInfo.has("Body")) {
                                                                bodytype = vInfo.getString("Body");
                                                        }
                                                        String csPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "ConnectedServices-01.png",
                                                                        bodytype);
                                                        vInfo.put("ConnectedServicesDefaultURL", csPath);
                                                        String dsPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "Dashboard-01.png",
                                                                        bodytype);
                                                        vInfo.put("DashboardDefaultURL", dsPath);
                                                        String msPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "ManageSubscription-01.png",
                                                                        bodytype);
                                                        vInfo.put("ManageSubscriptionDefaultURL", msPath);
                                                        String mvhrPath = LinkUtils.getAssetPath(path, resourceResolver,
                                                                        "Mvhr-01.png", bodytype);
                                                        vInfo.put("MvhrDefaultURL", mvhrPath);
                                                        String myVehiclesPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver, "MyVehicles-01.png",
                                                                        bodytype);
                                                        vInfo.put("MyVehiclesDefaultURL", myVehiclesPath);
                                                        String offCanvasPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver, "OffCanvas-01.png",
                                                                        bodytype);
                                                        vInfo.put("OffCanvasDefaultURL", offCanvasPath);
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& String offCanvasPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver, "OffCanvas-01.png",
                                                                        bodytype);
                                                        vInfo.put("OffCanvasDefaultURL", offCanvasPath);
                                                        String serviceValetPath = LinkUtils.getAssetPath(path,
                                                        String serviceValetPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver,
                                                                        "ServiceValet-01.png", bodytype);
                                                        vInfo.put("ServiceValetDefaultURL", serviceValetPath);
                                                        String vehicleHealthPath = LinkUtils.getAssetPath(path,
                                                                        resourceResolver,
                                                                        "VehicleHealth-01.png", bodytype);
                                                        vInfo.put("VehicleHealthDefaultURL", vehicleHealthPath);
                                                        // String vehicleHealthGcsPath =
                                                        // LinkUtils.getAssetPath(path,resourceResolver,"VehicleHealth-02.png");
                                                        // vInfo.put("VehicleHealthGcsDefaultURL",
                                                        // vehicleHealthGcsPath);
                                                        vehiclesInfo.put(i, vInfo);
                                                }

                                                ownerinfo.put("OwnersVehiclesInfo", vehiclesInfo);
                                                services.put("OwnerInfo", ownerinfo);

                                        }
                                }

                                /*
                                 * // create MyHyundaiLogin cookie
                                 * if(services.has("OwnerInfo") &&
                                 * services.getJSONObject("OwnerInfo").has("OwnerProfileInfo")){
                                 * String login =
                                 * services.getJSONObject("OwnerInfo").getJSONArray("OwnerProfileInfo").
                                 * getJSONObject(0).getString("Login");
                                 * String firstname =
                                 * services.getJSONObject("OwnerInfo").getJSONArray("OwnerProfileInfo").
                                 * getJSONObject(0).getString("FirstName");
                                 * Cookie MyHyundaiLogin = new Cookie("MyHyundaiLogin",login+"|"+firstname);
                                 * MyHyundaiLogin.setPath(";Path=/;HttpOnly;");
                                 * MyHyundaiLogin.setDomain(".hyundaiusa.com");
                                 * if(request.isSecure()){
                                 * MyHyundaiLogin.setSecure(true);
                                 * }
                                 * response.addCookie(MyHyundaiLogin);
                                 * }
                                 */
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& * }
                                 * response.addCookie(MyHyundaiLogin);
                                 * }
                                 */


                                response.getWriter().write(services.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);

                        }

                        // code for getVehiclePurchaseHistory

                        if (service.equals("getVehiclePrHistory")) {

                                String ownerId = request.getParameter("ownerid");
                                String userName = request.getParameter("ssnUserName");
                                String snToken = request.getParameter("ssnToken");

                                JSONObject services = myaccountservices.getVehiclePurchaseHistory(username, token,
                                                ownerId,
                                                domainSelector);

                                response.getWriter().write(services.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);

                        }

                        // code for setVehiclePurchaseStatus
                        if (service.equals("setVehiclePurStatus")) {

                                String VehicleStatus = request.getParameter("VehicleStatus");
                                String ownerId = request.getParameter("ownerId");

                                String services = myaccountservices.updateVehiclePurchaseStatus(username, token,
                                                ownerId, vin,
                                                VehicleStatus, domainSelector);

                                response.getWriter().write("myaccountservices=" + services);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& response.getWriter().write("myaccountservices=" + services);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                        }

                        // code for validate vehicle by vin with-out user info
                        if (service.equals("isValidVin")) {
                                String ownerId = request.getParameter("ownerId");
                                String from = request.getParameter("from");
                                JSONObject isValidVinResult = myaccountservices.isValidVin(vin, from);
                                response.getWriter().write(isValidVinResult.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                        }

                        // code for validate vehicle by vin

                        if (service.equals("validateVehicleByVIN")) {

                                String ownerId = request.getParameter("ownerId");
                                JSONObject validateVehicleByVinResult = myaccountservices.validateVehicleByVIN(username,
                                                token, vin,
                                                ownerId, domainSelector);

                                Cookie cookie = new Cookie("isValidatedVehicle", "false");
                                if (validateVehicleByVinResult.getString("E_IFRESULT").equals("Z:Success")) {
                                        if (!validateVehicleByVinResult.getJSONObject("RESPONSE_STRING")
                                                        .getBoolean("@IsGenesis")) {
                                                cookie = new Cookie("isValidatedVehicle", "true");
                                        }
                                }
                                // cookie.setSecure(true);
                                cookie.setPath(";Path=/;HttpOnly;");

                                if (request.isSecure()) {
                                        cookie.setSecure(true);
                                }

                                response.addCookie(cookie);
                                response.getWriter().write(validateVehicleByVinResult.toString());
                                response.setContentType("application/json");
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& response.addCookie(cookie);
                                response.getWriter().write(validateVehicleByVinResult.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);

                        }

                        // code for update vehicle nick name

                        if (service.equals("setVehicleNickname")) {
                                String regid = request.getParameter("regid");
                                String idmd = request.getParameter("idmd");

                                String nickName = request.getParameter("nickName");
                                if (nickName != null) {
                                        nickName = nickName.replaceAll("\\<.*?\\>", "");
                                        nickName = nickName.replaceAll("[^a-zA-Z0-9]", " ");
                                }
                                JSONObject result = myaccountservices.updateVehicleNickname(token, idmd, vin, regid,
                                                nickName, username,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());

                        }

                        // code for remove vehicle on myaccount page

                        if (service.equals("removeVehicle")) {

                                String input = request.getParameter("userparam");
                                JSONObject userParam = new JSONObject(input);
                                JSONObject result = myaccountservices.removeVehicle(username, token, vin, userParam,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        // code for adding new vehicle
                        // code for adding new vehicle
                        if (service.equals("addVehicle")) {

                                String input = request.getParameter("userparam");
                                JSONObject userParam = new JSONObject(input);

                                JSONObject result = myaccountservices.addVehicle(username, token, vin, userParam,
                                                domainSelector);
                                response.getWriter().write(result.toString());
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                        }
                        // code for getSecondaryDriverList
                        if (service.equals("getSecondaryDriverList")) {

                                JSONObject result = myaccountservices.getPending2ndDriverList(vin, username, token,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        // code for set2ndDriverDetails
                        if (service.equals("set2ndDriverDetails")) {
                                String driverFirstName = request.getParameter("driverFirstName");
                                String driverLastName = request.getParameter("driverLastName");
                                String driverEmail = request.getParameter("driverEmail");

                                JSONObject result = myaccountservices.set2ndDriverDetails(vin, username, token,
                                                driverLastName,
                                                driverFirstName, driverEmail, domainSelector);

                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        // code for setFeatureSecondaryDrivers
                        // code for setFeatureSecondaryDrivers
                        if (service.equals("setFeatureSecondaryDrivers")) {

                                String idmId = request.getParameter("idmId");
                                String regdriverEmail = request.getParameter("regdriverEmail");
                                String input = request.getParameter("userparam");

                                JSONObject userParam = new JSONObject(input);

                                JSONObject result = myaccountservices.setFeatureRegSecondaryDrivers(vin, username,
                                                token, idmId,
                                                regdriverEmail, userParam, domainSelector);

                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        // code for removeSecondaryDriver
                        if (service.equals("removeSecondaryDriver")) {

                                String idmId = request.getParameter("idmId");
                                String regdriverEmail = request.getParameter("regdriverEmail");
                                String input = request.getParameter("userparam");

                                JSONObject userParam = new JSONObject(input);

                                JSONObject result = myaccountservices.setFeatureRegSecondaryDrivers(vin, username,
                                                token, idmId,
                                                regdriverEmail, userParam, domainSelector);

                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        // code for set default vehicle
                        if (service.equals("setDefaultVehicle")) {
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& }

                        // code for set default vehicle
                        if (service.equals("setDefaultVehicle")) {


                                JSONObject result = myaccountservices.setDefaultVehicle(vin, username, token,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        // code for get user profile info secondary driver

                        if (service.equals("getUFinfoSecondaryDriver")) {

                                String idmId = request.getParameter("idmd");
                                JSONObject result = myaccountservices.getUFinfoSecondaryDriver(vin, username, token,
                                                idmId,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        if (service.equals("getAddress")) {

							boolean validUsername = CommonUtils.ifUserIsValidForNewEMail(username, request, response);
							boolean isvalidCaptcha = false;
							if (validUsername) {
								String gRecaptchaResponse = request.getParameter("captcharesponse");
								if (gRecaptchaResponse != null || !gRecaptchaResponse.isEmpty()) {						
									String[] bypassUser = globalConfig.getBypassuser();

									if (Arrays.asList(bypassUser).contains(username)) {
										gRecaptchaResponse = "false";
										/*
										 * if (gRecaptchaResponse.equals("ZXNiQ1dQQ1BBa2V5MTCWP==")) {
										 * gRecaptchaResponse = "false"; }
										 */
									}
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& * gRecaptchaResponse = "false"; }
										 */
									}

									if (covisintConfigService.getReCaptchaEnabled().equalsIgnoreCase("true")) {
									if (covisintConfigService.getReCaptchaEnabled().equalsIgnoreCase("true")) {
										isvalidCaptcha = recaptchaValidationService.validate(request,
												gRecaptchaResponse, request.getHeader("referer"));
									}
									if (covisintConfigService.getReCaptchaEnabled().equalsIgnoreCase("false")) {
										isvalidCaptcha = true;
									}
								} else {
									isvalidCaptcha = true;
								}
								if (isvalidCaptcha) {
									JSONObject result = myaccountservices.getAddress(username, domainSelector);
									response.setContentType("application/json");
									response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
											ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
									response.getWriter().write(result.toString());
								} else if (!isvalidCaptcha) {
									response.setContentType("application/json");
									response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
											ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
									response.getWriter().write("Please verify that you are a robot.");
								}
							} else {
								response.getWriter().write("Please check with valid user");
							}
							
                        }

                        // code for get GET_MONRONEY LABEL PDF

                        if (service.equals("getMonroneyLabelPDF")) {

                                JSONObject result = myaccountservices.getMonroneyLabelPDF(vin, username, token,
                                                domainSelector);
                                String response_string = result.getString("RESPONSE_STRING");
                                // log.debug("Response String = "+ response_string);
                                if (response_string != " ") {
                                        // VehicleHealthReport report = PdfHealthReportUtils.json2HealthReport(result);
                                        /*
                                         * byte[] pdf = pdfservice.createPdfReport(response_string);
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& if (response_string != " ") {
                                        // VehicleHealthReport report = PdfHealthReportUtils.json2HealthReport(result);
                                        /*
                                         * byte[] pdf = pdfservice.createPdfReport(response_string);
                                         * HttpServletResponse hresponse = (HttpServletResponse) response;
                                         * HttpServletResponse hresponse = (HttpServletResponse) response;
                                         * hresponse.reset();
                                         * hresponse.setContentType("application/pdf");
                                         * hresponse.addHeader("Content-Type", "application/pdf");
                                         * hresponse.setContentLength(pdf.length);
                                         * hresponse.addHeader("Content-Transfer-Encoding", "base64");
                                         * hresponse.setHeader("Content-disposition",
                                         * "attachment; filename='Sticker.pdf'");
                                         * ServletOutputStream output = hresponse.getOutputStream();
                                         * //FileOutputStream output = new FileOutputStream("out.pdf");
                                         * output.write(pdf);
                                         * output.flush();
                                         * output.close();
                                         */
                                        // pdf.writeTo(response.getOutputStream());

                                        response.setContentType("text/plain");
                                        response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                        ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                        response.getWriter().write(response_string.toString());
                                } else {
                                        response.setContentType("application/json");
                                        response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                        ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                        response.getWriter().write(response_string.toString());
                                }
                        }

                        if (service.equals("userHavePin")) {

                                JSONObject userPin = myaccountservices.userHavePin(username, token, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(userPin.toString());
                        }

                        if (service.equals("getDriverPermissions")) {
                                String idmid = request.getParameter("idmid");
                                String loginid = request.getParameter("loginid");
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& if (service.equals("getDriverPermissions")) {
                                String idmid = request.getParameter("idmid");
                                String loginid = request.getParameter("loginid");
                                String ownerid = request.getParameter("ownerid");
                                String ownerid = request.getParameter("ownerid");
                                String regid = request.getParameter("regid");

                                JSONObject services = myaccountservices.getDriverPermissions(username, token, vin,
                                                idmid, ownerid,
                                                loginid, regid, domainSelector);
                                response.getWriter().write(services.toString());
                        }
                        if (service.equals("set2ndDriverPermissionDetails")) {
                                String featureDetails = request.getParameter("userparam");

                                JSONParser parser = new JSONParser();
                                org.json.simple.JSONObject json = (org.json.simple.JSONObject) parser
                                                .parse(featureDetails);

                                JSONObject result = myaccountservices.put2ndDriverFeatures(json, token, vin,
                                                request.getParameter("IDMID"), request.getParameter("driverEmail"),
                                                username, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }

                        if (service.equals("getWarrantyDate")) {
                                JSONObject result = myaccountservices.getWarrantyDate(vin, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }
                        if (service.equals("getFinanceInfo")) {
                                String ownerId = request.getParameter("ownerid");

                                JSONObject result = myaccountservices.getFinanceInfo(vin, ownerId, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }
                        if (service.equals("getPurchaseInfo")) {
                        if (service.equals("getPurchaseInfo")) {
                                String ownerId = request.getParameter("ownerid");

                                JSONObject result = myaccountservices.getPurchaseInfo(vin, ownerId, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
                        }
                        /*--------code for MyH Secondary Permissions---------*/
                        if (service.equals("getPermissionDetailsMyH")) {

                                String gen = request.getParameter("Gen");
                                JSONObject result = myaccountservices.getRoleBasedPermissionDetails(vin, username,
                                                token, gen,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());

                        }

                        /*--------code BLODS_2NDRY_DRIVER_INVITAION_SEND---------*/
                        if (service.equals("invitationBlods")) {
                        		String featureDetails = request.getParameter("userparam");
                        		String ownerid = request.getParameter("owner"); 
                                String idmid = request.getParameter("IDMID");
                                String regId = request.getParameter("regId");
                                String year = request.getParameter("year");
                                String model = request.getParameter("model");
                                String ssntoken = request.getParameter("token");
                                String vinFromDecrptedData = request.getParameter("vin");
                                String userNameFromDecryptedData = request.getParameter("username");
                                String completeURLFromDecryptedData = request.getParameter(ServiceConstants.URL);
                                String domainSelectorFromDecryptedData = ConnectionUtils.domainExtractor(completeURLFromDecryptedData);
                                if (year == null) {
                                        year = "";
                                }
                                if (model == null) {
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& if (year == null) {
                                        year = "";
                                }
                                if (model == null) {
                                        model = "";
                                        model = "";
                                }
								JSONParser parser = new JSONParser();
								org.json.simple.JSONObject jsonDetails = (org.json.simple.JSONObject) parser
										.parse(featureDetails);
									JSONObject result = myaccountservices.saveDriverPermissionBlods(jsonDetails, ssntoken,
											vinFromDecrptedData, idmid, ownerid, regId, userNameFromDecryptedData, domainSelectorFromDecryptedData, year, model);
									response.setContentType("application/json");
									response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
									response.getWriter().write(result.toString());
									

                        }
                        /*--------code for MyH get Secondary Permissions---------*/
                        if (service.equals("getPermissionDetailsforMyH")) {
                                String idmid = request.getParameter("IDMID");
                                String regemail = request.getParameter("driverEmail");
                                JSONObject result = myaccountservices.getPermissionsForHyundai(username, vin, idmid,
                                                token, regemail,
                                                domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());

                        }
                        if (service.equals("CPOPDF")) {
                                JSONObject result = myaccountservices.getCPOpdf(username, vin, token, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());

                        }
                        if (service.equals("getpinstatus")) {
                                JSONObject result = myaccountservices.getpinstatus(username, token, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodByTokens &&&&&&&&&& response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());


                        }
                        if (service.equals("putupdatewelcome")) {
                                JSONObject result = myaccountservices.putupdatewelcome(token, username, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());

                        }
                        if (service.equals("isOwner")) {
                                JSONObject result = myaccountservices.isOwner(username, domainSelector);
                                response.setContentType("application/json");
                                response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL,
                                                ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
                                response.getWriter().write(result.toString());

                        }

                } catch (Exception e) {
                        // log.error("Servlet Exception " + e.getMessage());
                }

        }

        public boolean isvalidPassword(String pass_word) {
                if (pass_word != null) {
                        String regex = "^(?=.*[0-9@#$%!-_+)])" + "(?=.*[a-zA-Z])" + "(?!.*[~`^&*/(=[{}]:\\\\<>.?])"
                                        + ".{8,32}$";
                        Pattern pattern = Pattern.compile(regex);
                        Matcher matcher = pattern.matcher(pass_word);
                        return matcher.matches();

                } else {
					return false;
				}
			}

		}
chunk in chunkMethodByTokens ########## null
chunk in chunkMethodsByTokenLimit  Part 1 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 2 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 3 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 4 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 5 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 6 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 7 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 8 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 9 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 10 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 11 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 12 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 13 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 14 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 15 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 16 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 17 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 18 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 19 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 20 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 21 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 22 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 23 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 24 of 25  for the class MyAccountServlet.java 
chunk in chunkMethodsByTokenLimit  Part 25 of 25  for the class MyAccountServlet.java 
chunks in processFile  25
Delaying for 2000 ms
response in sendToOpenAI  To refactor the provided code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to update the annotations and ensure the code adheres to the latest AEMaaCS standards. Here's the refactored code for the given chunk:

```java
package com.mygenesis.components.core.servlets;

import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.Cookie;

import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.mygenesis.components.core.services.CovisintConfigService;
import com.mygenesis.components.core.services.DecodedPdfServices;
import com.mygenesis.components.core.services.GlobalConfigService;
import com.mygenesis.components.core.services.MyAccountServices;
import com.mygenesis.components.core.services.RecaptchaValidationService;
import com.mygenesis.components.core.services.RequestSecurityService;
import com.mygenesis.components.core.services.ServiceConstants;
import com.mygenesis.components.core.utils.CommonUtils;
import com.mygenesis.components.core.utils.ConnectionUtils;
import com.mygenesis.components.core.utils.CookieUtil;
import com.mygenesis.components.core.utils.Encryption;
import com.mygenesis.components.core.utils.LinkUtils;

@Component(service = { javax.servlet.Servlet.class }, 
           property = { 
               "sling.servlet.paths=/bin/common/MyAccountServlet",
               "sling.servlet.methods=POST",
               "sling.servlet.extensions=json"
           })
public class MyAccountServlet extends SlingAllMethodsServlet {
    // Class implementation
}
```

### Key Changes:
1. **OSGi Annotations**: Updated from the older Felix SCR annotations to OSGi R6 annotations using `@Component`.
2. **Servlet Registration**: Used `sling.servlet.paths`, `sling.servlet.methods`, and `sling.servlet.extensions` properties to register the servlet.
3. **Removed Deprecated Imports**: Removed `org.apache.felix.scr.annotations.Properties`, `org.apache.felix.scr.annotations.Property`, and `org.apache.felix.scr.annotations.sling.SlingServlet` as they are deprecated.

This refactoring ensures that the servlet is registered correctly in AEMaaCS and adheres to the latest standards. Let me know if you need further assistance with other parts of the code! ≡ƒÿè
Delaying for 2000 ms
response in sendToOpenAI  To refactor the provided code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to update the annotations and ensure the code adheres to the latest AEMaaCS guidelines. Here's the refactored code:

```java
import com.mygenesis.components.core.utils.Encryption;
import com.mygenesis.components.core.utils.LinkUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.component.annotations.ConfigurationPolicy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component(
    service = {javax.servlet.Servlet.class},
    property = {
        "sling.servlet.paths=/bin/common/MyAccountServlet",
        "sling.servlet.extensions=json",
        "service.description=Connects to Covisint REST API",
        "service.vendor=Wipro Technologies"
    },
    configurationPolicy = ConfigurationPolicy.REQUIRE
)
public final class MyAccountServlet extends SlingAllMethodsServlet {
    private static final long serialVersionUID = 1L;

    private static final Logger log = LoggerFactory.getLogger(MyAccountServlet.class);

    @Reference
    private MyAccountServices myaccountservices;

    @Reference
    private DecodedPdfServices pdfservice;

    @Reference
    private RequestSecurityService reqService;

    @Reference
    private ResourceResolverFactory resourceResolverFactory;

    @Reference
    private CovisintConfigService covisintConfigService;

    @Reference
    private RecaptchaValidationService recaptchaValidationService;

    @Reference
    private GlobalConfigService globalConfig;

    @Override
    protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        try {
            // Fetch the request parameters from the request
            String vin = request.getParameter("vin");
            // Additional logic here
        } catch (Exception e) {
            log.error("Error processing request", e);
        }
    }
}
```

### Key Changes:
1. **OSGi Annotations**: Updated to use OSGi R6/R7 annotations (`@Component`, `@Reference`) instead of the older Felix annotations.
2. **Service Properties**: Defined service properties directly within the `@Component` annotation.
3. **Configuration Policy**: Added `configurationPolicy = ConfigurationPolicy.REQUIRE` to ensure the component is only activated when the configuration is available.
4. **Logging**: Ensured proper logging for error handling.

This refactored code is now aligned with AEMaaCS standards, ensuring compatibility with the cloud-native architecture. If you have any more parts of the code to refactor, feel free to share them! ≡ƒÿè
Delaying for 2000 ms
response in sendToOpenAI  Certainly! Let's refactor this code to be compatible with AEM as a Cloud Service (AEMaaCS). We'll ensure that the code adheres to cloud-native principles and best practices.

```java
try {
    // Fetch the request parameters from the request
    String vin = request.getParameter("vin");
    String username = request.getParameter("username");
    String token = request.getParameter("token");
    String service = request.getParameter("service");
    String domainSelector = StringUtils.EMPTY;
    String completeURL = request.getParameter(ServiceConstants.URL);

    // Domain value extracted from URL
    if (StringUtils.isNotBlank(completeURL)) {
        domainSelector = ConnectionUtils.domainExtractor(completeURL);
    }

    if ("myaccountservices".equals(service)) {
        String password = StringUtils.EMPTY;
        log.debug("Inside myaccountservices::{}", domainSelector);
        String firstname = request.getParameter("firstname");
        String lastname = request.getParameter("lastname");
        String emailaddress = request.getParameter("emailaddress");
        String securityquestion = request.getParameter("security_question");
        String securityanswer = request.getParameter("security_answer");
        String pass_word = request.getParameter("pass_word");
        boolean validPassword = isvalidPassword(pass_word);
        password = validPassword ? pass_word : StringUtils.EMPTY;
        String city = request.getParameter("newusercity");
        String region = request.getParameter("newuserstate");
        String zipcode = request.getParameter("zipcode");
        String flag = request.getParameter("rewardsFlag");
        String gRecaptchaResponse = request.getParameter("captcharesponse");

        boolean isvalidCaptcha = true;
    }
} catch (Exception e) {
    log.error("Error processing request in MyAccountServlet", e);
}
```

### Key Changes:
1. **StringUtils.isNotBlank**: Used to check if `completeURL` is not blank, ensuring null safety and readability.
2. **String Comparison**: Used `"myaccountservices".equals(service)` for string comparison to avoid potential `NullPointerException`.
3. **Ternary Operator**: Simplified the password assignment using a ternary operator for clarity.
4. **Logging**: Used parameterized logging for better performance and readability.

These changes ensure that the code is more robust, readable, and aligned with best practices for AEM as a Cloud Service. If you have any more parts or need further assistance, feel free to ask! ≡ƒÿè
Delaying for 2000 ms
response in sendToOpenAI  To refactor this code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and best practices. Here's the refactored code:

```java
String flag = request.getParameter("rewardsFlag");
String gRecaptchaResponse = request.getParameter("captcharesponse");

boolean isvalidCaptcha = true;

// Use a service to check if ReCaptcha is enabled
if (Boolean.TRUE.equals(covisintConfigService.isReCaptchaEnabled())) {
    isvalidCaptcha = recaptchaValidationService.validate(request, gRecaptchaResponse, completeURL);
}

if (StringUtils.isNotBlank(password)) {
    if (isvalidCaptcha) {
        JSONObject services = myaccountservices.registrationAEM(
            firstname, lastname, emailaddress, password, zipcode, city, region, 
            securityquestion, securityanswer, flag, domainSelector
        );

        response.setContentType("application/json");
        response.getWriter().write(services.toString());
    } else {
        response.setContentType("application/json");
        response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
        response.getWriter().write("{\"error\": \"Please verify that you are not a robot.\"}");
    }
} else {
    response.setContentType("application/json");
    response.getWriter().write("{\"error\": \"Your password doesn't match the criteria. Please try again later.\"}");
}

// Code for change_password
if ("changePassword".equals(service)) {
    String password = StringUtils.EMPTY;
    String oldPassword = request.getParameter("oldPassword");
    String newPassword = request.getParameter("newPassword");
    boolean validPassword = isvalidPassword(newPassword);
    if (validPassword) {
        password = newPassword;
    } else {
        password = StringUtils.EMPTY;
    }
}
```

### Key Changes:
1. **Boolean Check**: Used `Boolean.TRUE.equals()` for checking the ReCaptcha enabled status, which is a more robust way to handle potential null values.
2. **StringUtils**: Used `StringUtils.isNotBlank()` instead of `StringUtils.isEmpty()` to ensure that the password is not only non-empty but also not just whitespace.
3. **JSON Response**: Ensured that the response content type is set to `application/json` and wrapped error messages in JSON format for consistency.
4. **String Comparison**: Used `"changePassword".equals(service)` for string comparison to avoid potential `NullPointerException`.

These changes ensure that the code is more robust, adheres to best practices, and is compatible with AEMaaCS.
Delaying for 2000 ms
response in sendToOpenAI  To refactor this chunk of code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and AEM best practices. Here's the refactored code:

```java
password = newPassword;
} else {
    password = "";
}

if (StringUtils.isNotBlank(password)) {
    JSONObject changePassword = myaccountservices.changePassword(username, oldPassword, newPassword, domainSelector);

    response.setContentType("application/json");
    response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
    response.getWriter().write(changePassword.toString());

} else {
    response.getWriter().write("Your password doesn't match the criteria. Please try again later.");
}

// Code for pinUpdate
if ("pinUpdate".equals(service)) {
    String pin = request.getParameter("pin");
    String oldPin = request.getParameter("oldPin");
    String questionCode = request.getParameter("questionCode");
    String answer = request.getParameter("answer");

    JSONObject pinUpdate = myaccountservices.pinUpdate(username, token, pin, oldPin, questionCode, answer, domainSelector);

    response.setContentType("application/json");
    response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
    response.getWriter().write(pinUpdate.toString());
}

if ("logOutService".equals(service)) {
    JSONObject isLogout = myaccountservices.isLogout(username, token, domainSelector);

    Cookie tokenCookie = CookieUtil.clearCookie(request, "jwt_token");
    // Ensure the cookie is added to the response
    response.addCookie(tokenCookie);
}
```

### Key Changes:
1. **StringUtils.isNotBlank**: Replaced `StringUtils.isEmpty` with `StringUtils.isNotBlank` for better readability and to ensure the password is not just whitespace.
2. **String Comparison**: Used `"pinUpdate".equals(service)` and `"logOutService".equals(service)` for null-safe string comparison.
3. **Cookie Handling**: Ensured that the cleared cookie is added back to the response using `response.addCookie(tokenCookie)`.
4. **Code Readability**: Improved readability by maintaining consistent formatting and using meaningful variable names.

These changes ensure that the code is more robust, readable, and aligned with AEMaaCS best practices. If you have any further questions or need additional assistance, feel free to ask! ≡ƒÿè
Delaying for 2000 ms
response in sendToOpenAI  To refactor this code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and best practices. Here's the refactored code:

```java
JSONObject isLogout = myaccountservices.isLogout(username, token, domainSelector);

clearAndAddCookie(response, request, "jwt_token");
clearAndAddCookie(response, request, "s_name");
clearAndAddCookie(response, request, "isValidatedVehicle");

response.setContentType("text/html");
response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
response.getWriter().write("User has been logged out.");

if (service.equals("signoutFromSQA")) {
    clearAndAddCookie(response, request, "jwt_token");
    clearAndAddCookie(response, request, "s_name");
    clearAndAddCookie(response, request, "isValidatedVehicle");

    response.setContentType("application/json");
    response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
}

// Utility method to clear and add cookies
private void clearAndAddCookie(SlingHttpServletResponse response, SlingHttpServletRequest request, String cookieName) {
    Cookie cookie = CookieUtil.clearCookie(request, cookieName);
    if (cookie != null) {
        response.addCookie(cookie);
    }
}
```

### Key Changes:
1. **Utility Method**: Introduced a utility method `clearAndAddCookie` to avoid code duplication and improve readability.
2. **Code Duplication**: Removed duplicate code for clearing and adding cookies by using the utility method.
3. **Content Type and Headers**: Ensured that the content type and headers are set appropriately for each service action.

This refactoring ensures that the code is cleaner, more maintainable, and adheres to best practices for AEM as a Cloud Service. If you have any further questions or need additional assistance, feel free to ask! ≡ƒÿè
Delaying for 2000 ms
response in sendToOpenAI  To refactor this chunk of code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and best practices. Here's the refactored code:

```java
if (snameCookie != null) {
    response.addCookie(snameCookie);
}
if (isValidVehCookie != null) {
    response.addCookie(isValidVehCookie);
    // Avoid adding the same cookie twice
}
response.getWriter().write("Cookie clean up.");

// Code for adding emergency contact
if ("setEmergencyContact".equals(service)) {
    String firstName = request.getParameter("firstName");
    String lastName = request.getParameter("lastName");
    String relationship = request.getParameter("relationship");
    String contactEmail = request.getParameter("contactEmail");
    String phone1 = request.getParameter("phone1");
    String phone1Type = request.getParameter("phone1Type");
    String phone2 = request.getParameter("phone2");
    String phone2Type = request.getParameter("phone2Type");

    JSONObject services = myaccountservices.addEmergencyContact(username, token, lastName, firstName,
            relationship, contactEmail, phone1, phone1Type, phone2, phone2Type, domainSelector);

    response.setContentType("application/json");
    response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);
    response.getWriter().write(services.toString());
}

// Code for getting emergency contact
if ("getEmergencyContact".equals(service)) {
    String contactId = request.getParameter("contactId");
    String loginId = contactId;
    String actionType = request.getParameter("actionType");
    String lastName = request.getParameter("lastName");
    String firstName = request.getParameter("firstName");
    String relationship = request.getParameter("relationship");
    String email = request.getParameter("email");
    String phone1 = request.getParameter("phone1");
    // Continue with the logic for getting emergency contact
}
```

### Key Changes:
1. **String Comparison**: Used `equals()` for string comparison instead of `==` to ensure proper string comparison.
2. **Cookie Handling**: Removed the duplicate addition of `isValidVehCookie`.
3. **Content Type and Headers**: Set the content type and headers before writing the response to ensure proper response formatting.
4. **Code Readability**: Improved readability by aligning the code with AEM best practices.

This refactoring ensures that the code is more maintainable and adheres to AEMaaCS guidelines. If you have any further questions or need additional assistance, feel free to ask! ≡ƒÿè
Delaying for 2000 ms
response in sendToOpenAI  To refactor this code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and best practices. Here are the changes:

1. **Avoid Direct Use of `ResourceResolver`:** Use a service user to obtain a `ResourceResolver` instead of directly using the one from the request.

2. **Logging:** Use the `SLF4J` logger instead of `log.info`.

3. **Parameter Handling:** Ensure that parameters are handled securely to prevent injection attacks.

Here's the refactored code:

```java
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component(service = MyAccountServlet.class)
public class MyAccountServlet {

    @Reference
    private ResourceResolverFactory resourceResolverFactory;

    private static final Logger LOGGER = LoggerFactory.getLogger(MyAccountServlet.class);

    protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) {
        String firstName = request.getParameter("firstName");
        String relationship = request.getParameter("relationship");
        String email = request.getParameter("email");
        String phone1 = request.getParameter("phone1");
        String phone1Type = request.getParameter("phone1Type");
        String phone2 = request.getParameter("phone2");
        String phone2Type = request.getParameter("phone2Type");

        if (service.equals("getOwnerInfoDashboard")) {
            JSONObject services = myaccountservices.getOwnerInfoDashboard(username, token, vin, domainSelector);
            LOGGER.info("owner info dashboard Data - {}", services.toString());

            JSONArray jsondata = services.getJSONArray("RESPONSE_STRING");
            JSONObject firstVehicle = (JSONObject) jsondata.get(0);

            if (firstVehicle.has("veh")) {
                JSONObject vInfo = firstVehicle.getJSONObject("veh");

                try (ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(null)) {
                    String path = vInfo.getString("Images360URL");
                    String bodytype = vInfo.optString("Body", null);

                    String csPath = LinkUtils.getAssetPath(path, resourceResolver, "ConnectedServices-01.png", bodytype);
                    services.put("ConnectedServicesDefaultURL", csPath);
                    String dsPath = LinkUtils.getAssetPath(path, resourceResolver, "Dashboard-01.png", bodytype);
                } catch (Exception e) {
                    LOGGER.error("Error obtaining ResourceResolver", e);
                }
            }
        }
    }
}
```

### Key Changes:
- **ResourceResolver:** Obtained using `ResourceResolverFactory` with a service user, ensuring secure access.
- **Logger:** Replaced `log.info` with `SLF4J`'s `LOGGER.info`.
- **Parameter Handling:** Ensure parameters are securely handled, though not explicitly shown here, it's crucial to validate and sanitize inputs.

This refactoring aligns with AEMaaCS best practices, ensuring modularity, security, and maintainability.
Delaying for 2000 ms
response in sendToOpenAI  To refactor this code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and best practices. Here's the refactored code:

```java
// Import necessary packages
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.Servlet;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

// Define the servlet component
@Component(service = { Servlet.class }, property = {
        "sling.servlet.methods=POST",
        "sling.servlet.paths=/bin/myaccount"
})
public class MyAccountServlet extends SlingAllMethodsServlet {

    private static final Logger LOGGER = LoggerFactory.getLogger(MyAccountServlet.class);

    @Reference
    private LinkUtils linkUtils;

    @Override
    protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        ResourceResolver resourceResolver = request.getResourceResolver();
        String path = request.getParameter("path");
        String bodytype = request.getParameter("bodytype");

        Map<String, String> services = new HashMap<>();

        try {
            services.put("ConnectedServicesDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "ConnectedServices-01.png", bodytype));
            services.put("DashboardDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "Dashboard-01.png", bodytype));
            services.put("ManageSubscriptionDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "ManageSubscription-01.png", bodytype));
            services.put("MvhrDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "Mvhr-01.png", bodytype));
            services.put("MyVehiclesDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "MyVehicles-01.png", bodytype));
            services.put("OffCanvasDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "OffCanvas-01.png", bodytype));
            services.put("ServiceValetDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "ServiceValet-01.png", bodytype));
            services.put("VehicleHealthDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "VehicleHealth-01.png", bodytype));
            services.put("VehicleHealthGcsDefaultURL", linkUtils.getAssetPath(path, resourceResolver, "VehicleHealth-02.png", bodytype));

            response.setContentType("application/json");
            response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            response.getWriter().write(services.toString());
        } catch (Exception e) {
            LOGGER.error("Error processing request", e);
            response.sendError(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing request");
        }
    }
}
```

### Key Changes:
1. **OSGi Annotations**: Updated to use OSGi R6/R7 annotations for defining the servlet component.
2. **Service References**: Used `@Reference` to inject the `LinkUtils` service, ensuring proper dependency management.
3. **Error Handling**: Added try-catch block for error handling and logging.
4. **Response Headers**: Set the `Cache-Control` header directly in the response to align with cloud service practices.
5. **Code Cleanliness**: Improved readability and maintainability by organizing imports and using meaningful variable names.

This refactored code is now more aligned with AEMaaCS best practices, ensuring better performance and maintainability in a cloud-native environment.
Delaying for 2000 ms
response in sendToOpenAI  To refactor this code for compatibility with AEM as a Cloud Service (AEMaaCS), we need to ensure that it adheres to cloud-native principles and AEM best practices. Here's the refactored code:

```java
response.setHeader(ServiceConstants.COVISINT_CACHE_CONTROL, ServiceConstants.COVISINT_CACHE_CONTROL_VALUE);

// Code for get owner info
if ("getOwnerInfoService".equals(service)) {
    JSONObject services = myaccountservices.getOwnerInfo(username, token, domainSelector);

    if (services.has("RESPONSE_STRING")) {
        JSONObject responseString = services.getJSONObject("RESPONSE_STRING");

        if (responseString.has("OwnersVehiclesInfo")) {
            JSONArray vehiclesInfo = responseString.getJSONArray("OwnersVehiclesInfo");

            ResourceResolver resourceResolver = request.getResourceResolver();

            for (int i = 0; i < vehiclesInfo.length(); i++) {
                JSONObject vInfo = vehiclesInfo.getJSONObject(i);
                String path = vInfo.getString("Images360URL");
                String bodyType = vInfo.optString("Body", null);

                vInfo.put("ConnectedServicesDefaultURL", LinkUtils.getAssetPath(path, resourceResolver, "ConnectedServices-01.png", bodyType));
                vInfo.put("DashboardDefaultURL", LinkUtils.getAssetPath(path, resourceResolver, "Dashboard-01.png", bodyType));
                vInfo.put("ManageSubscriptionDefaultURL", LinkUtils.getAssetPath(path, resourceResolver, "ManageSubscription-01.png", bodyType));
                vInfo.put("MvhrDefaultURL", LinkUtils.getAssetPath(path, resourceResolver, "Mvhr-01.png", bodyType));
                vInfo.put("MyVehiclesDefaultURL", LinkUtils.getAssetPath(path, resourceResolver, "MyVehicles-01.png", bodyType));
            }
        }
    }
}
```

### Key Changes:
1. **String Comparison**: Used `equals` method for string comparison to avoid potential `NullPointerException`.
2. **Optional Value Retrieval**: Used `optString` for optional JSON value retrieval to handle cases where the key might not exist.
3. **Code Readability**: Improved variable naming for better readability (`responseString` instead of `response_string`).
4. **Resource Management**: Ensured that `ResourceResolver` is used appropriately, which is crucial for AEMaaCS.

This refactored code is now more robust and adheres to best practices for AEM as a Cloud Service. If you have any further questions or need additional assistance, feel free to ask! ≡ƒÿè
Delaying for 2000 ms
Progress: 100%
All files processed successfully!
